import { QueryDocument } from "./queryBuilder";
import { InternalMapping } from "../mapping/internalMapping";
import { EntityMapping } from "../mapping/entityMapping";
/**
 * Class that builds a database query document.
 * @hidden
 */
export declare class CriteriaBuilder {
    protected mapping: EntityMapping;
    /**
     * The last error encounter by the CriteriaBuilder. The value is cleared before each build.
     */
    error: Error;
    constructor(mapping: EntityMapping);
    /**
     * Builds and validates a database query document
     * @param criteria The source query document.
     */
    build(criteria: QueryDocument): QueryDocument;
    protected prepareQueryDocument(query: QueryDocument, mapping?: InternalMapping, withinField?: boolean): QueryDocument;
    private _prepareQueryExpression(operator, query, mapping);
    protected prepareArrayOfValues(operator: string, value: any[], mapping: InternalMapping): any[];
    protected prepareQueryValue(path: string, value: any, mapping: InternalMapping): any;
    /**
     * Finds the maximum depth of nested arrays
     * @param value The value to check
     * @param depth The current depth. Default is 0.
     */
    private _findArrayDepth(value, depth?);
    /**
     * Return true if the first property is a query operator; otherwise, return false. Query expressions won't mix
     * operator and non-operator fields like query documents can.
     * @param value The value to check.
     */
    protected isQueryExpression(value: any): boolean;
}
