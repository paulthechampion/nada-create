"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var arrayMapping_1 = require("./arrayMapping");
var booleanMapping_1 = require("./booleanMapping");
var classMapping_1 = require("./classMapping");
var dateMapping_1 = require("./dateMapping");
var entityMapping_1 = require("./entityMapping");
var enumMapping_1 = require("./enumMapping");
var numberMapping_1 = require("./numberMapping");
var objectMapping_1 = require("./objectMapping");
var regExpMapping_1 = require("./regExpMapping");
var stringMapping_1 = require("./stringMapping");
var tupleMapping_1 = require("./tupleMapping");
var property_1 = require("./property");
var converterMapping_1 = require("./converterMapping");
var bufferMapping_1 = require("./bufferMapping");
var persistenceError_1 = require("../persistenceError");
var MappingModel;
(function (MappingModel) {
    /**
     * Creates a property for an object mapping.
     * @param name The name of the property on the object.
     * @param mapping The mapping for the property type.
     */
    function createProperty(name, mapping) {
        if (!name) {
            throw new persistenceError_1.PersistenceError("Missing required argument 'name'.");
        }
        if (!mapping) {
            throw new persistenceError_1.PersistenceError("Missing required argument 'mapping'.");
        }
        return new property_1.Property(name, mapping);
    }
    MappingModel.createProperty = createProperty;
    /**
     * Create a mapping for an array.
     * @param elementMapping The mapping for the array element.
     */
    function createArrayMapping(elementMapping) {
        if (!elementMapping) {
            throw new persistenceError_1.PersistenceError("Missing required argument 'elementMapping'.");
        }
        return new arrayMapping_1.ArrayMapping(elementMapping);
    }
    MappingModel.createArrayMapping = createArrayMapping;
    /**
     * Creates a mapping for a boolean.
     */
    function createBooleanMapping() {
        return new booleanMapping_1.BooleanMapping();
    }
    MappingModel.createBooleanMapping = createBooleanMapping;
    /**
     * Creates a mapping for a named class type.
     * @param baseClass Optional. The mapping for the base class.
     */
    function createClassMapping(baseClass) {
        return new classMapping_1.ClassMapping(baseClass);
    }
    MappingModel.createClassMapping = createClassMapping;
    /**
     * Creates a mapping for a date.
     */
    function createDateMapping() {
        return new dateMapping_1.DateMapping();
    }
    MappingModel.createDateMapping = createDateMapping;
    /**
     * Creates a mapping for a named class type associated with a database collection.
     * @param baseClass Optional. The mapping for the base class.
     */
    function createEntityMapping(baseClass) {
        return new entityMapping_1.EntityMapping(baseClass);
    }
    MappingModel.createEntityMapping = createEntityMapping;
    /**
     * Creates a mapping for an enumeration.
     * @param members The members to include in the enumeration mapping.
     */
    function createEnumMapping(members, ignoreCase) {
        if (!members) {
            throw new persistenceError_1.PersistenceError("Missing required argument 'members'.");
        }
        return new enumMapping_1.EnumMapping(members, ignoreCase);
    }
    MappingModel.createEnumMapping = createEnumMapping;
    /**
     * Creates a mapping for a number.
     */
    function createNumberMapping() {
        return new numberMapping_1.NumberMapping();
    }
    MappingModel.createNumberMapping = createNumberMapping;
    /**
     * Creates a mapping for an anonymous object.
     */
    function createObjectMapping() {
        return new objectMapping_1.ObjectMapping();
    }
    MappingModel.createObjectMapping = createObjectMapping;
    /**
     * Creates a mapping for a regular expression.
     */
    function createRegExpMapping() {
        return new regExpMapping_1.RegExpMapping();
    }
    MappingModel.createRegExpMapping = createRegExpMapping;
    /**
     * Creates a mapping for a string.
     */
    function createStringMapping() {
        return new stringMapping_1.StringMapping();
    }
    MappingModel.createStringMapping = createStringMapping;
    /**
     * Creates a mapping for a property converter.
     * @param converter The PropertyConverter to use for the mapping.
     */
    function createConverterMapping(converter) {
        return new converterMapping_1.ConverterMapping(converter);
    }
    MappingModel.createConverterMapping = createConverterMapping;
    /**
     * Creates a mapping for a binary buffer.
     */
    function createBufferMapping() {
        return new bufferMapping_1.BufferMapping();
    }
    MappingModel.createBufferMapping = createBufferMapping;
    /**
     * Creates a mapping for a tuple.
     * @param elementMappings An array for mappings to use for the tuple elements.
     */
    function createTupleMapping(elementMappings) {
        if (!elementMappings) {
            throw new persistenceError_1.PersistenceError("Missing required argument 'elementMappings'.");
        }
        return new tupleMapping_1.TupleMapping(elementMappings);
    }
    MappingModel.createTupleMapping = createTupleMapping;
})(MappingModel = exports.MappingModel || (exports.MappingModel = {}));
