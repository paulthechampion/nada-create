import { Index } from "./index";
import { CollectionOptions } from "./collectionOptions";
import { IdentityGenerator } from "../config/configuration";
export declare namespace MappingModel {
    /**
     * Represents a data mapping.
     */
    interface Mapping {
        /**
         * Readonly flags that describe the mapping. This value is assigned internally and should not be modified.
         */
        flags: MappingFlags;
        /**
         * Returns true if the mapping has the specified flags; otherwise, returns false.
         */
        hasFlags(flags: MappingFlags): boolean;
    }
    /**
     * Map of enumeration members where the key is the name and the value is the numeric value of the enum member.
     */
    interface EnumMembers {
        [name: string]: number;
    }
    /**
     * Represents a mapping a database document field to an object property.
     */
    interface Property {
        /**
         * The name of the property.
         */
        name: string;
        /**
         * The property flags.
         */
        flags: PropertyFlags;
        /**
         * Indicates if null values should be saved for this property. By default a property is removed from the object
         * when saved if it has a value of `null` or `undefined`.
         */
        nullable?: boolean;
        /**
         * The name of the database document field.
         */
        field: string;
        /**
         * The name of the property in the target TypeMapping that is used to retrieve the value of this property.
         */
        inverseOf: string;
        /**
         * The mapping of the property.
         */
        mapping: Mapping;
        /**
         * Sets the property flags.
         */
        setFlags(flags: PropertyFlags): void;
    }
    /**
     * Flags that indicate the type of [[Mapping]].
     */
    const enum MappingFlags {
        Array = 1,
        Boolean = 2,
        Class = 4,
        Date = 8,
        Enum = 16,
        Number = 32,
        Object = 64,
        RegExp = 128,
        String = 256,
        Tuple = 512,
        Entity = 1024,
        Embeddable = 2048,
        InheritanceRoot = 4096,
        Converter = 8192,
        Buffer = 16384,
        Iterable = 32768,
        Virtual = 65536,
        Immutable = 131072,
        ImmutableEmbeddable = 133120,
    }
    /**
     * Flags for a [[Property]] mapping.
     */
    const enum PropertyFlags {
        /**
         * No flags.
         */
        None = 0,
        /**
         * Indicates that the property is ignored.
         */
        Ignored = 1,
        /**
         * Save operations should be cascaded to this property.
         */
        CascadeSave = 2,
        /**
         * Remove operations should be cascaded to this property.
         */
        CascadeRemove = 4,
        /**
         * Detach operations should be cascaded to this property.
         */
        CascadeDetach = 8,
        /**
         * Refresh operations should be cascaded to this property.
         */
        CascadeRefresh = 16,
        /**
         * Merge operations should be cascaded to this property.
         */
        CascadeMerge = 32,
        /**
         * All operations should be cascaded to this property.
         */
        CascadeAll = 62,
        /**
         * All operations should be cascaded to this property.
         */
        InverseSide = 64,
        /**
         * Not currently supported.
         * @hidden
         */
        OrphanRemoval = 256,
        /**
         * Indicates the database field should not be read during deserialization.
         */
        WriteOnly = 512,
        /**
         * Indicates the field should be eagerly fetched.
         */
        FetchEager = 1024,
        /**
         * Indicates the field should be lazily fetched.
         */
        FetchLazy = 2048,
        /**
         * Property should contain a reference to the parent of the embeddable.
         */
        Parent = 4096,
        /**
         * All non-walk flags.
         * @hidden
         */
        All = 8063,
        /**
         * Indicates that references to entities should be walked.
         * @hidden
         */
        WalkEntities = 8192,
        /**
         * Indicates that reference found during a walk operation should be fetched.
         * @hidden
         */
        Dereference = 16384,
    }
    /**
     * Represents the mappings from a document to an anonymous object type.
     */
    interface ObjectMapping extends Mapping {
        addProperty(property: Property): void;
        getProperty(name: string): Property;
        /**
         * Validates a property before adding it to the mapping. Returns any validation error messages or undefined if none.
         * @param property The property to validate.
         * @returns The error message.
         */
        validateProperty(property: Property): string;
    }
    /**
     * Represents the mapping from a document to a named class type.
     */
    interface ClassMapping extends ObjectMapping {
        /**
         * The name of the class.
         */
        name: string;
        /**
         * The database document field to use to represent the type of the class. If not specified, the field name from
         * the Configuration is used. Only valid on the root mapping of an inheritance hierarchy.
         */
        discriminatorField: string;
        /**
         * Readonly property gets the value used to represent the class type in the database document.
         */
        discriminatorValue: string;
        /**
         * The constructor for the class.
         */
        classConstructor: Function;
        /**
         * Readonly property indicates if this class mapping has derived classes.
         */
        hasSubClasses: boolean;
        /**
         * Readonly property indicates if this class mapping has a base class.
         */
        hasBaseClass: boolean;
        /**
         * Sets the value used to represent the class type in the database document. If not specified, the naming
         * strategy in the Configuration is used to determine the discriminator value based on the class name.
         * @param value The value to use for the discriminator for this class.
         */
        setDiscriminatorValue(value: string): void;
    }
    /**
     * Represents the mapping from a document collection to a named class type.
     */
    interface EntityMapping extends ClassMapping {
        /**
         * The database collection name. If not specified, the naming strategy specified in the Configuration is used to
         * determine the collection name.
         */
        collectionName: string;
        /**
         * The name of the database. If not specified, the default database for the connection is used.
         */
        databaseName: string;
        /**
         * The order in which collections are flushed to the database. Higher priority collections are flushed first.
         */
        flushPriority: FlushPriority;
        /**
         * A list of indexes to optionally create for the collection on startup.
         */
        indexes: Index[];
        /**
         * Options to pass to the database when creating the collection.
         */
        collectionOptions: CollectionOptions;
        /**
         * The IdentityGenerator to use for this collection. If not specified, the IdentityGenerator specified in
         * the Configuration is used.
         */
        identity: IdentityGenerator;
        /**
         * The change tracking to use for this entity. If not specified, the change tracking type specified in the
         * Configuration is used.
         */
        changeTracking: ChangeTrackingType;
        /**
         * Indicates if this entity should use optimistic locking. Default is true.
         */
        versioned: boolean;
        /**
         * The name of the database document field to use to store the version of the entity. If not specified the
         * value from the Configuration is used.
         */
        versionField: string;
        /**
         * Adds a specification for an index that should be created on the collection. The index is only created if
         * creation of indexes is enabled.
         * @param index The index specification.
         */
        addIndex(index: Index): void;
    }
    /**
     * Creates a property for an object mapping.
     * @param name The name of the property on the object.
     * @param mapping The mapping for the property type.
     */
    function createProperty(name: string, mapping: Mapping): Property;
    /**
     * Create a mapping for an array.
     * @param elementMapping The mapping for the array element.
     */
    function createArrayMapping(elementMapping: Mapping): Mapping;
    /**
     * Creates a mapping for a boolean.
     */
    function createBooleanMapping(): Mapping;
    /**
     * Creates a mapping for a named class type.
     * @param baseClass Optional. The mapping for the base class.
     */
    function createClassMapping(baseClass?: ClassMapping): ClassMapping;
    /**
     * Creates a mapping for a date.
     */
    function createDateMapping(): Mapping;
    /**
     * Creates a mapping for a named class type associated with a database collection.
     * @param baseClass Optional. The mapping for the base class.
     */
    function createEntityMapping(baseClass?: EntityMapping): EntityMapping;
    /**
     * Creates a mapping for an enumeration.
     * @param members The members to include in the enumeration mapping.
     */
    function createEnumMapping(members: EnumMembers, ignoreCase?: boolean): Mapping;
    /**
     * Creates a mapping for a number.
     */
    function createNumberMapping(): Mapping;
    /**
     * Creates a mapping for an anonymous object.
     */
    function createObjectMapping(): ObjectMapping;
    /**
     * Creates a mapping for a regular expression.
     */
    function createRegExpMapping(): Mapping;
    /**
     * Creates a mapping for a string.
     */
    function createStringMapping(): Mapping;
    /**
     * Creates a mapping for a property converter.
     * @param converter The PropertyConverter to use for the mapping.
     */
    function createConverterMapping(converter: PropertyConverter): Mapping;
    /**
     * Creates a mapping for a binary buffer.
     */
    function createBufferMapping(): Mapping;
    /**
     * Creates a mapping for a tuple.
     * @param elementMappings An array for mappings to use for the tuple elements.
     */
    function createTupleMapping(elementMappings: Mapping[]): Mapping;
}
export interface PropertyConverter {
    /**
     * Converts an object property value to a document field value.
     * @param property The property value to convert.
     */
    convertToDocumentField(property: any): any;
    /**
     * Converts a document field value to an object property value.
     * @param field The field value to convert.
     */
    convertToObjectProperty(field: any): any;
    /**
     * Returns true if the document field values are equal; otherwise, returns false. This method is only called if both values are not
     * null and the values are not strictly equal.
     * @param field1 First document field value.
     * @param field2 Other document field value.
     */
    areEqual(field1: any, field2: any): boolean;
}
export declare const enum ChangeTrackingType {
    None = 0,
    DeferredImplicit = 1,
    DeferredExplicit = 2,
}
/**
 * Indicates the order in which collections are flushed to the database. Higher priority collections are flushed first. By default
 * collections are given a priority of Medium.
 */
export declare const enum FlushPriority {
    High = 100,
    MediumHigh = 75,
    Medium = 50,
    MediumLow = 25,
    Low = 0,
}
/**
 * Flags that indicate how operations should cascade to a property.
 */
export declare const enum CascadeFlags {
    /**
     * No flags.
     */
    None = 0,
    /**
     * Save operations should be cascaded to this property.
     */
    Save = 2,
    /**
     * Remove operations should be cascaded to this property.
     */
    Remove = 4,
    /**
     * Detach operations should be cascaded to this property.
     */
    Detach = 8,
    /**
     * Refresh operations should be cascaded to this property.
     */
    Refresh = 16,
    /**
     * Merge operations should be cascaded to this property.
     */
    Merge = 32,
    /**
     * All operations should be cascaded to this property.
     */
    All = 62,
}
export declare const enum FetchType {
    /**
     * Indicates the field should be eagerly fetched.
     */
    Eager = 1024,
    /**
     * Indicates the field should be lazily fetched.
     */
    Lazy = 2048,
}
