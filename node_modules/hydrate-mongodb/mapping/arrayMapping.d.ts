import { InternalMapping } from "./internalMapping";
import { MappingBase } from "./mappingBase";
import { Reference } from "../reference";
import { MappingModel } from "./mappingModel";
import { InternalSession } from "../session";
import { ResultCallback } from "../core/callback";
import { ResolveContext } from "./resolveContext";
import { ReadContext } from "./readContext";
import { Observer } from "../observer";
import { WriteContext } from "./writeContext";
export declare class ArrayMapping extends MappingBase {
    elementMapping: InternalMapping;
    constructor(elementMapping: InternalMapping);
    read(context: ReadContext, value: any): any;
    write(context: WriteContext, value: any): any;
    watch(value: any, observer: Observer, visited: any[]): void;
    areEqual(documentValue1: any, documentValue2: any): boolean;
    walk(session: InternalSession, value: any, flags: MappingModel.PropertyFlags, entities: any[], embedded: any[], references: Reference[]): void;
    fetch(session: InternalSession, parentEntity: any, value: any, path: string[], depth: number, callback: ResultCallback<any>): void;
    fetchInverse(session: InternalSession, parentEntity: any, propertyName: string, path: string[], depth: number, callback: ResultCallback<any>): void;
    protected resolveCore(context: ResolveContext): void;
    private _nestedDepth;
    readonly nestedDepth: number;
    private _findNestedDepth(depth, mapping);
}
