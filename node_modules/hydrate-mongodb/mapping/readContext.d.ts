import { MappingError } from "./mappingError";
import { InternalSession } from "../session";
import { Observer } from "../observer";
/**
 * @hidden
 */
export declare class ReadContext {
    session: InternalSession;
    /**
     * The current path.
     */
    path: string;
    /**
     * A list of errors that occurred during deserialization.
     */
    errors: MappingError[];
    /**
     * True if there are errors in the context; otherwise, false.
     */
    hasErrors: boolean;
    /**
     * Observer used to watch deserialized objects, if specified.
     */
    observer: Observer;
    /**
     * Fetches found while walking the object.
     */
    fetches: string[];
    /**
     * The parent object.
     */
    parent: Object;
    constructor(session: InternalSession);
    /**
     * Adds an error to the context.
     * @param message The error message.
     * @param path Optional. The current path if different than what's in the context.
     */
    addError(message: string, path?: string): void;
    addFetch(path: string): void;
    /**
     * Gets a string summarizing all errors in the context.
     */
    getErrorMessage(): string;
}
