"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var objectMappingBuilder_1 = require("./objectMappingBuilder");
/**
 * @hidden
 */
var ClassMappingBuilder = /** @class */ (function (_super) {
    __extends(ClassMappingBuilder, _super);
    function ClassMappingBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ClassMappingBuilder.prototype.populateCore = function () {
        var mapping = this.mapping;
        mapping.name = this.type.name;
        mapping.classConstructor = this.type.ctr;
        _super.prototype.populateCore.call(this);
        // add default values
        if (mapping.flags & 4096 /* InheritanceRoot */) {
            if (!mapping.discriminatorField) {
                mapping.discriminatorField = this.context.config.discriminatorField;
            }
        }
        // if we are a document type and the the discriminatorValue is not set, default to the class name
        if (!mapping.discriminatorValue && (mapping.hasBaseClass || mapping.hasSubClasses)) {
            mapping.setDiscriminatorValue(this.context.config.discriminatorNamingStrategy(mapping.name));
        }
    };
    return ClassMappingBuilder;
}(objectMappingBuilder_1.ObjectMappingBuilder));
exports.ClassMappingBuilder = ClassMappingBuilder;
