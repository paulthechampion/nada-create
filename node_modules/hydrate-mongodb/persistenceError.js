"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Base class for all persistence related errors.
 */
var PersistenceError = /** @class */ (function () {
    function PersistenceError(message) {
        /**
         * The name of the error.
         */
        this.name = "PersistenceError";
        Error.call(this, message);
        this.message = message;
        Error.call(this, message);
        Error.captureStackTrace(this, this.constructor);
    }
    return PersistenceError;
}());
exports.PersistenceError = PersistenceError;
// typeScript declares Error as an Interface instead of a class so use prototypical inheritance
PersistenceError.prototype = Object.create(Error.prototype);
PersistenceError.prototype.constructor = PersistenceError;
var EntityNotFoundError = /** @class */ (function (_super) {
    __extends(EntityNotFoundError, _super);
    function EntityNotFoundError() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * The name of the error.
         */
        _this.name = "EntityNotFoundError";
        return _this;
    }
    return EntityNotFoundError;
}(PersistenceError));
exports.EntityNotFoundError = EntityNotFoundError;
