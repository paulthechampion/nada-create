/// <reference types="node" />
import { EventEmitter } from "events";
import { Callback } from "./core/callback";
import { Constructor } from "./index";
import { ResultCallback } from "./core/callback";
import { InternalSessionFactory, SessionFactory } from "./sessionFactory";
import { Persister } from "./persister";
import { EntityMapping } from "./mapping/entityMapping";
import { QueryBuilder, FindOneQuery } from "./query/queryBuilder";
import { QueryDefinition } from "./query/queryDefinition";
/**
 *  The primary interface used to interact with the database. The Session is a
 *  [Unit of Work](http://martinfowler.com/eaaCatalog/unitOfWork.html) that keeps track of changes until they are
 *  synchronized with the database by calling [[flush]] or [[close]].
 */
export interface Session {
    /**
     * The [SessionFactory] that created this [Session].
     */
    factory: SessionFactory;
    /**
     * Saves an entity to the Session. If the entity is new then it becomes managed. If the entity is already managed
     * then it is flagged for dirty check. The entity is not actually saved to the database until the Session is
     * flushed.
     * @param obj The entity to save.
     * @param callback Called after the entity has been added to the Session.
     */
    save(obj: Object, callback?: Callback): void;
    /**
     * Removes an entity from the Session. The entity is not actually removed from the database util the Session is
     * flushed.
     * @param obj The entity to remove.
     * @param callback Called after the entity has been removed from the Session.
     */
    remove(obj: Object, callback?: Callback): void;
    /**
     * Detaches an entity from the Session making it unmanaged. Any changes to the entity will not be persisted.
     * @param obj The entity to detach.
     * @param callback Called after the entity has been detached.
     */
    detach(obj: Object, callback?: Callback): void;
    /**
     * Refreshes an entity state from database. Any changes to the entity are discarded.
     * @param obj The entity to refresh.
     * @param callback Called after the entity has been refreshed.
     */
    refresh(obj: Object, callback: Callback): void;
    /**
     * Synchronizes the Session with the database, writing any changes.
     * @param callback Called after the changes have been written to the database.
     */
    flush(callback?: Callback): void;
    /**
     * Clears the Session, detaching all managed entities.
     * @param callback Called after the Session has been cleared.
     */
    clear(callback?: Callback): void;
    /**
     * Finds an entity by identifier.
     * @param ctr The constructor for the entity to find.
     * @param id The identifier for the entity.
     * @param callback Called with the entity.
     */
    find<T>(ctr: Constructor<T>, id: any, callback?: ResultCallback<T>): FindOneQuery<T>;
    /**
     * Check by identifier if an entity exists.
     * @param ctr The constructor for the entity to find.
     * @param id The identifier for the entity.
     * @param callback Called with a boolean indicating if an entity with exists or not. Note that if an entity is pending removal then the
     * value will be false.
     */
    exists<T>(ctr: Constructor<T>, id: any, callback: ResultCallback<boolean>): void;
    /**
     * Gets a reference to an entity without making a request to the database.
     * @param ctr The constructor for the entity.
     * @param id The identifier for the entity.
     */
    getReference<T>(ctr: Constructor<T>, id: any): T;
    /**
     * Fetches an entity reference from the database.
     * @param obj The entity reference to fetch.
     * @param callback Called with the fetched entity.
     */
    fetch<T>(obj: T, callback?: ResultCallback<T>): void;
    /**
     * Fetches entity references at the specified path(s) on the given entity.
     * @param obj The entity
     * @param path The path(s) to check. Uses the same
     * [dot notation](https://docs.mongodb.org/manual/core/document/#dot-notation) that MongoDB uses for queries.
     * @param callback Called after any entity references have been fetched.
     */
    fetch<T>(obj: T, path: string | string[], callback?: ResultCallback<T>): void;
    query<T>(ctr: Constructor<T>): QueryBuilder<T>;
    /**
     * Waits for pending operations on the Session to complete.
     * @param callback Called after all pending operations on the Session have completed.
     */
    wait(callback?: Callback): void;
    /**
     * Flushes any changes to the database and closes the Session. Calling operations on a closed Session will result
     * in an error.
     * @param callback Called after the Session has been closed.
     */
    close(callback?: Callback): void;
    /**
     * Checks if an entity is contained in the Session.
     * @param obj The entity to check.
     */
    contains(obj: Object): boolean;
    /**
     * Converts an entity to a document, the same document that is stored in the database. The document is suitable for serialization to
     * JSON.
     * @param obj The entity to convert to a document.
     * @param callback Optional callback is called with serialized document. If callback is provided, any errors encountered during
     * writing the document are passed to the callback. If a callback is not provided and errors are encountered during writing the
     * document, `null` is returned.
     */
    toDocument(obj: Object, callback?: ResultCallback<Object>): Object;
    /**
     * Checks if an entity has changed since it was loaded from the database.
     * @param obj The entity to check.
     * @param callback Optional callback is called with a boolean indicating if the entity has changed. If callback is provided, any errors
     * encountered during checking the entity are passed to the callback. If a callback is not provided and errors are encountered during
     * checking the entity, `null` is returned.
     */
    isDirty(obj: Object, callback?: ResultCallback<boolean>): boolean;
    /**
     * Gets the version number of an entity. Returns `null` if the version cannot be determined.
     * @param obj The entity to get the version for.
     */
    getVersion(obj: Object): number;
    /**
     * Gets an array of all entities managed by the session.
     */
    getEntities(): Object[];
    /**
     * Adds an event listener.
     * @param event The event to listen for.
     * @param listener The listener function.
     */
    on(event: string, listener: Function): EventEmitter;
}
/**
 * @hidden
 */
export interface InternalSession extends Session {
    factory: InternalSessionFactory;
    getObject(id: any): any;
    registerManaged(persister: Persister, entity: Object, document: any): void;
    notifyRemoved(entity: Object): void;
    getPersister(mapping: EntityMapping): Persister;
    getReferenceInternal(mapping: EntityMapping, id: any): any;
    fetchInternal(entity: Object, paths: string[], callback: ResultCallback<any>): void;
    executeQuery(query: QueryDefinition, callback: ResultCallback<any>): void;
}
/**
 * @hidden
 */
export declare class SessionImpl extends EventEmitter implements InternalSession {
    factory: InternalSessionFactory;
    /**
     * Cached Persisters by Mapping
     */
    private _persisters;
    /**
     * Hash table containing all objects by id associated with the session.
     */
    private _objectLinksById;
    /**
     * List of all ObjectLinks associated with the session.
     */
    private _objectLinks;
    /**
     * Scheduled operations linked list head.
     */
    private _scheduleHead;
    /**
     * Scheduled operations linked list tail.
     */
    private _scheduleTail;
    /**
     * Task queue coordinates asynchronous actions.
     */
    private _queue;
    private _traceEnabled;
    constructor(factory: InternalSessionFactory);
    save(obj: any, callback?: Callback): void;
    remove(obj: any, callback?: Callback): void;
    refresh(obj: any, callback?: Callback): void;
    detach(obj: any, callback?: Callback): void;
    clear(callback?: Callback): void;
    flush(callback?: Callback): void;
    wait(callback?: Callback): void;
    find<T>(ctr: Constructor<T>, id: any, callback?: ResultCallback<T>): FindOneQuery<T>;
    exists<T>(ctr: Constructor<T>, id: any, callback: ResultCallback<boolean>): void;
    fetch<T>(obj: T, pathsOrCallback: any, callback?: ResultCallback<T>): void;
    close(callback?: Callback): void;
    executeQuery(query: QueryDefinition, callback: ResultCallback<any>): void;
    /**
     * Determines whether an entity is managed by this session.
     * @param obj The entity to check.
     */
    contains(obj: any): boolean;
    /**
     * Gets an array of all entities managed by the session.
     */
    getEntities(): Object[];
    /**
     * Get an instance whose state may be fetched in the future.
     * @param ctr The constructor
     * @param id The id of the entity
     * @param callback Called with the reference.
     */
    getReference<T>(ctr: Constructor<T>, id: any): T;
    /**
     * Converts an entity to a document, the same document that is stored in the database. The document is suitable for serialization to
     * JSON.
     * @param obj The entity to convert to a document.
     * @param callback Optional callback is called with serialized document. If callback is provided, any errors encountered during
     * writing the document are passed to the callback. If a callback is not provided and errors are encountered during writing the
     * document, `null` is returned.
     */
    toDocument(obj: Object, callback?: ResultCallback<Object>): Object;
    isDirty(obj: Object, callback?: ResultCallback<boolean>): boolean;
    /**
     * Gets the version number of an entity used for optimistic locking. Returns `null` if the version cannot be determined.
     * @param obj The entity to get the version for.
     */
    getVersion(obj: Object): number;
    getReferenceInternal(mapping: EntityMapping, id: any): any;
    /**
     * Gets a managed object by the specified id. If the object is found but scheduled for delete then null is
     * returned. If the object is not found then undefined is returned; otherwise, the object is returned.
     * @param id The object identifier.
     */
    getObject(id: any): any;
    registerManaged(persister: Persister, entity: any, document: any): void;
    private _trackChanges(links);
    private _stopWatching(links);
    getPersister(mapping: EntityMapping): Persister;
    query<T>(ctr: Constructor<T>): QueryBuilder<T>;
    /**
     * Called by TaskQueue to execute an operation.
     * @param action The action to execute.
     * @param arg Contains arguments for the action.
     * @param callback Called when method completes.
     */
    private _execute(action, arg, callback);
    private _save(obj, callback);
    private _saveEntities(entities, callback);
    private _makeDirty(links);
    private _clearDirty(links);
    /**
     * Notifies session that a managed entity has been removed from the database from outside of the session.
     * @param entity The entity that was removed.
     */
    notifyRemoved(entity: Object): void;
    private _remove(obj, callback);
    private _removeEntities(entities, callback);
    private _removeEntity(obj, scheduleDelete);
    private _detach(obj, callback);
    private _detachEntities(entities, callback);
    private _refresh(obj, callback);
    private _refreshEntities(entities, callback);
    private _flush(callback);
    /**
     * Populates the batch with the current scheduled operations. Since building the batch could take a long time if
     * there are many scheduled operations, break it up into chucks so we are not blocking the Node event queue.
     * @param batch The batch to build
     * @param links The current link in the list of scheduled operations
     * @param callback Called when the batch has been built
     */
    private _buildBatch(batch, links, callback);
    /**
     * Called after a batch is successfully executed.
     * @param head The head of the scheduled operation list.
     * @param duration The duration of the flush operation, for trace logging.
     * @param callback Called when processing is completed.
     */
    private _batchCompleted(head, duration, callback);
    private _logFlushStats(head, duration);
    private _close(callback);
    fetchInternal(obj: any, paths: string[], callback: ResultCallback<any>): void;
    private _fetchPaths(obj, paths, callback);
    /**
     * Detaches all managed objects.
     * @param callback Callback to execute after operation completes.
     */
    private _clear(callback);
    private _getObjectLinks(obj);
    private _linkObject(obj, persister);
    private _unlinkObject(links);
    private _cleanupUnlinkedObject(links);
    private _scheduleOperation(links, operation);
    private _clearScheduledOperation(links);
    private _clearIdentifier(links);
    private _findReferencedEntities(obj, flags, callback);
    private _walk(mapping, entity, flags, entities, embedded, callback);
    private _createTaskQueue();
}
