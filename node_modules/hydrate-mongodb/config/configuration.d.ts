import { MongoClient } from "mongodb";
import { NamingStrategy } from "./namingStrategies";
import { ResultCallback } from "../core/callback";
import { ChangeTrackingType } from "../mapping/mappingModel";
import { MappingModel, PropertyConverter } from "../mapping/mappingModel";
import { SessionFactory } from "../sessionFactory";
/**
 * Specifies default settings used to create the [[SessionFactory]].
 */
export declare class Configuration {
    /**
     * The default database name to use.
     */
    databaseName: string;
    /**
     * Default identity generator to use.
     */
    identityGenerator: IdentityGenerator;
    /**
     * True if entities are versioned by default; otherwise, false.
     */
    versioned: boolean;
    /**
     * True if null values should be saved for properties by default; otherwise, false.
     */
    nullable: boolean;
    /**
     * Default field name to use for optimistic locking.
     */
    versionField: string;
    /**
     * Default field name to use for the class discriminator.
     */
    discriminatorField: string;
    /**
     * Default change tracking strategy to use.
     */
    changeTracking: ChangeTrackingType;
    /**
     * If specified, prefix to add to all collection names.
     */
    collectionPrefix: string;
    /**
     * Naming strategy to use for collection names.
     */
    collectionNamingStrategy: NamingStrategy;
    /**
     * Naming strategy to use for field names.
     */
    fieldNamingStrategy: NamingStrategy;
    /**
     * Naming strategy to use for the discriminator value of a class.
     */
    discriminatorNamingStrategy: NamingStrategy;
    /**
     * Named property converters.
     */
    propertyConverters: {
        [name: string]: PropertyConverter;
    };
    /**
     * A logger that conforms for the [bunyan](https://www.npmjs.com/package/bunyan) logger interface. If specified, all executed queries
     * and other debug information will be logged using the TRACE logging level.
     */
    logger: Logger;
    /**
     * Indicates if any missing indexes should be created when the [[SessionFactory]] is created. This is turned off by default.
     */
    createIndexes: boolean;
    /**
     * @hidden
     */
    private _mappings;
    /**
     * Adds a mapping provider to the configuration.
     * @param mapping The mapping provider to use.
     */
    addMapping(mapping: MappingProvider): void;
    /**
     * Creates a session factory.
     * @param connection The MongoDB connection to use.
     * @param callback Called once the session factory is created.
     */
    createSessionFactory(connection: MongoClient, callback: ResultCallback<SessionFactory>): void;
    /**
     * Creates a session factory.
     * @param connection The MongoDB connection to use.
     * @param databaseName The name of the default database. If not specified, the database name must be specified in either the
     * [[Configuration]] or the Collection decorator.
     * @param callback Called once the session factory is created.
     */
    createSessionFactory(connection: MongoClient, databaseName: string, callback: ResultCallback<SessionFactory>): void;
    /**
     * @hidden
     */
    private _buildCollections(connection, databaseName, registry, callback);
}
export interface IdentityGenerator {
    generate(): any;
    fromString(text: string): any;
    validate(value: any): boolean;
    areEqual(first: any, second: any): boolean;
}
/**
 * Describes a type that is able to convert an entity or embeddable property value to a MongoDB document field and back.
 *
 * ### Example
 *
 * The example below defines a PropertyConverter that converts an instance of a Point class to a string.
 * ```typescript
 *  class PointConverter implements PropertyConverter {
 *
 *      convertToDocumentField(property: any): any {
 *          if(property instanceof Point) {
 *              return [property.x, property.y].join(",");
 *          }
 *      }
 *
 *      convertToObjectProperty(field: any): any {
 *          if(typeof field === "string") {
 *              var parts = field.split(",");
 *              return new Point(parts[0], parts[1]);
 *         }
 *      }
 *  }
 *  ```
 */
export interface PropertyConverter {
    /**
     * Converts an object property value to a document field value.
     * @param property The property value to convert.
     */
    convertToDocumentField(property: any): any;
    /**
     * Converts a document field value to an object property value.
     * @param field The field value to convert.
     */
    convertToObjectProperty(field: any): any;
    /**
     * Returns true if the document field values are equal; otherwise, returns false. This method is only called if both values are not
     * null and the values are not strictly equal.
     * @param field1 First document field value.
     * @param field2 Other document field value.
     */
    areEqual(field1: any, field2: any): boolean;
}
/**
 * Provides data mappings to the Configuration.
 */
export interface MappingProvider {
    /**
     * Gets a list of ClassMappings.
     * @param config The configuration to use for the mappings.
     * @param callback Called with a list of ClassMappings.
     */
    getMapping(config: Configuration, callback: ResultCallback<MappingModel.ClassMapping[]>): void;
}
/**
 * A logger that conforms for the [bunyan](https://www.npmjs.com/package/bunyan) logger interface.
 */
export interface Logger {
    /**
     * Creates a child logger with the given options.
     * @param options Logger options.
     */
    child(options: LoggerOptions): Logger;
    /**
     * Creates a log record with the TRACE log level.
     * @param error The error to log.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    trace(error: Error, msg?: string, ...args: any[]): void;
    /**
     * Creates a log record with the TRACE log level.
     * @param fields Set of additional fields to log.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    trace(fields: Object, msg?: string, ...args: any[]): void;
    /**
     * Creates a log record with the TRACE log level.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    trace(msg: string, ...params: any[]): void;
    /**
     * Creates a log record with the DEBUG log level.
     * @param error The error to log.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    debug(error: Error, msg?: string, ...args: any[]): void;
    /**
     * Creates a log record with the DEBUG log level.
     * @param fields Set of additional fields to log.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    debug(fields: Object, msg?: string, ...args: any[]): void;
    /**
     * Creates a log record with the DEBUG log level.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    debug(msg: string, ...args: any[]): void;
    /**
     * Creates a log record with the INFO log level.
     * @param error The error to log.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    info(error: Error, msg?: string, ...args: any[]): void;
    /**
     * Creates a log record with the INFO log level.
     * @param fields Set of additional fields to log.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    info(fields: Object, msg?: string, ...args: any[]): void;
    /**
     * Creates a log record with the INFO log level.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    info(msg: string, ...args: any[]): void;
    /**
     * Creates a log record with the WARN log level.
     * @param error The error to log.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    warn(error: Error, msg?: string, ...args: any[]): void;
    /**
     * Creates a log record with the WARN log level.
     * @param fields Set of additional fields to log.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    warn(fields: Object, msg?: string, ...args: any[]): void;
    /**
     * Creates a log record with the WARN log level.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    warn(msg: string, ...args: any[]): void;
    /**
     * Creates a log record with the ERROR log level.
     * @param error The error to log.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    error(error: Error, msg?: string, ...args: any[]): void;
    /**
     * Creates a log record with the ERROR log level.
     * @param fields Set of additional fields to log.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    error(fields: Object, msg?: string, ...args: any[]): void;
    /**
     * Creates a log record with the ERROR log level.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    error(msg: string, ...args: any[]): void;
    /**
     * Creates a log record with the FATAL log level.
     * @param error The error to log.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    fatal(error: Error, msg?: string, ...args: any[]): void;
    /**
     * Creates a log record with the FATAL log level.
     * @param fields Set of additional fields to log.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    fatal(fields: Object, msg?: string, ...args: any[]): void;
    /**
     * Creates a log record with the FATAL log level.
     * @param msg Log message. This can be followed by additional arguments for printf-like formatting.
     */
    fatal(msg: string, ...args: any[]): void;
}
/**
 * Logger options.
 */
export interface LoggerOptions {
    /**
     * Dictionary of custom serializers. The key is the name of the property that is serialized and the the value
     * is a function that takes an object and returns a JSON serializable value.
     */
    serializers?: {
        [key: string]: (input: any) => any;
    };
}
