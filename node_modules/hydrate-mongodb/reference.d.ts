import { InternalSession } from "./session";
import { EntityMapping } from "./mapping/entityMapping";
import { ResultCallback } from "./core/callback";
/**
 * @hidden
 */
export declare class Reference {
    mapping: EntityMapping;
    private _id;
    /**
     * The id of the reference as a string.
     */
    id: string;
    constructor(mapping: EntityMapping, _id: any);
    fetch(session: InternalSession, callback: ResultCallback<any>): void;
    /**
     * Returns true if other is another reference with the same id or the resolved entity for the reference.
     * @param other The reference or entity to compare.
     */
    equals(other: any): boolean;
    /**
     * Returns true if values are equivalent. Either value can be a Reference or an Entity.
     * @param value1 The first reference or entity to compare.
     * @param value2 The second reference or entity to compare.
     */
    static areEqual(value1: any, value2: any): boolean;
    static isReference(obj: any): boolean;
    /**
     * Fetches the Reference if the object is a Reference; otherwise, returns the passed object in the callback.
     * @param session The current session.
     * @param obj The object to fetch.
     * @param callback Called with the fetched object.
     */
    static fetch(session: InternalSession, obj: any, callback: ResultCallback<any>): void;
}
