require("reflect-metadata");
var util_1 = require("./util");
/**
 * Information on a [[Method]] parameter.
 *
 * <uml>
 * hide members
 * hide circle
 * Method *-- Parameter : parameters
 * Parameter <-- Method : method
 * Parameter <-- Type : type
 * </uml>
 */
var Parameter = (function () {
    /**
     * Creates a [[Parameter]] object.
     * @param context The [[ReflectContext]] that is managing this parameter.
     * @param method The [[Method]] that owns this parameter.
     * @param name The name of the parameter.
     * @param index The position of the parameter in the [[Method]] parameter list.
     * @param type The [[Type]] of the parameter.
     * @hidden
     */
    function Parameter(context, method, name, index, type) {
        this.method = method;
        this.name = name;
        this.index = index;
        this.type = type;
        this._context = context;
    }
    Parameter.prototype.getAnnotations = function (annotationCtr) {
        return util_1.matchingAnnotations(annotationCtr, this._getOwnMetadata());
    };
    /**
     * Checks if the parameter has the specified type of annotation.
     * @param annotationCtr The constructor function for the annotation to look for.
     */
    Parameter.prototype.hasAnnotation = function (annotationCtr) {
        return this.getAnnotations(annotationCtr).length > 0;
    };
    /**
     * @hidden
     */
    Parameter.prototype._getOwnMetadata = function () {
        var parameters = Reflect.getOwnMetadata('parameters', this.method.parent.ctr.prototype, this.method.name) || [];
        return parameters[this.index] || [];
    };
    return Parameter;
})();
exports.Parameter = Parameter;
