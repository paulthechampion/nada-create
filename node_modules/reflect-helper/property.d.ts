import { Type } from "./type";
import { ReflectContext } from "./reflectContext";
import { Constructor } from "./util";
/**
 * Information on a [[Type]] property.
 *
 * <uml>
 * hide members
 * hide circle
 * Type *-- Property : properties
 * Property <-- Type : parent
 * Property <-- Type : type
 * </uml>
 */
export declare class Property {
    protected context: ReflectContext;
    /**
     * The [[Type]] that owns this property.
     */
    parent: Type;
    /**
     * The name of the property.
     */
    name: string;
    private _descriptor;
    /**
     * Creates a [[Property]] object.
     * @param context The [[ReflectContext]] that is managing the [[Type]].
     * @param parent The [[Type]] that owns this property.
     * @param name The name of the property.
     * @hidden
     */
    constructor(context: ReflectContext, parent: Type, name: string);
    /**
     * @hidden
     */
    private _type;
    /**
     * The [[Type]] of the property. (Only available if the --emitDecoratorMetadata compiler option is enabled.)
     * @returns {Type}
     */
    type: Type;
    /**
     * Returns true if the property has a get accessor.
     */
    hasGetter: boolean;
    /**
     * Returns true if the property has a set accessor.
     */
    hasSetter: boolean;
    /**
     * Gets a list of annotations for the property.
     */
    getAnnotations(): any[];
    /**
     * Gets a list of the specified type of annotations for the property.
     * @param annotationCtr The constructor function used to filter the annotations.
     */
    getAnnotations<T>(annotationCtr: Constructor<T>): T[];
    /**
     * Checks if the property has the specified type of annotation.
     * @param annotationCtr The constructor function for the annotation to look for.
     */
    hasAnnotation(annotationCtr: Constructor<any>): boolean;
    /**
     * Gets the value of the property on a target object.
     * @param obj The target object.
     */
    getValue(obj: Object): any;
    /**
     * Sets the value of the property on a target object.
     * @param obj The target object.
     * @param value The value to set.
     */
    setValue(obj: Object, value: any): void;
    /**
     * @hidden
     */
    private _getDescriptor();
    /**
     * @hidden
     */
    private _getOwnMetadata();
    /**
     * @hidden
     */
    private _getPropertyType();
}
