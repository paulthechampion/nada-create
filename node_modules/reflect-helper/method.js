var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
require("reflect-metadata");
var parameter_1 = require("./parameter");
var property_1 = require("./property");
// These RegEx and the code below for getParameterNames is modified code from AngularJS
var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
/**
 * Information on a method.
 *
 * <uml>
 * hide members
 * hide circle
 * Property <|-- Method
 * Type *-- Method : methods
 * Method <-- Type : returnType
 * Method *- Parameter : parameters
 * </uml>
 */
var Method = (function (_super) {
    __extends(Method, _super);
    function Method() {
        _super.apply(this, arguments);
    }
    /**
     * Invokes the method on the given object with the specified arguments.
     * @param obj The object to invoke the method on.
     * @param args A list of arguments to pass to the method.
     */
    Method.prototype.invoke = function (obj, args) {
        this.invoke = (new Function("o, a", "var m = o['" + this.name + "']; if(!m) throw new Error(\"Cannot invoke method '" + this.name + "'.\"); return m.apply(o, a)"));
        var method = obj[this.name];
        if (!method) {
            throw new Error("Cannot invoke method '" + this.name + "'.");
        }
        return method.apply(obj, args);
    };
    Object.defineProperty(Method.prototype, "returnType", {
        /**
         * The return type of the method. (Only available if the --emitDecoratorMetadata compiler option is enabled and the method is decorated.)
         */
        get: function () {
            if (this._returnType === undefined) {
                this._returnType = this.context.getType(this._getReturnType());
            }
            return this._returnType;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    Method.prototype._getReturnType = function () {
        return Reflect.getMetadata('design:returntype', this.parent.ctr.prototype, this.name);
    };
    Object.defineProperty(Method.prototype, "parameters", {
        /**
         * A list of parameters for the method.
         */
        get: function () {
            if (!this._parameters) {
                this._parameters = this._getParameters();
            }
            return this._parameters;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    Method.prototype._getParameters = function () {
        var names = this._getParameterNames(), types = this._getParameterTypes(), params = new Array(names.length);
        for (var i = 0; i < params.length; i++) {
            params[i] = new parameter_1.Parameter(this.context, this, names[i], i, this.context.getType(types[i]));
        }
        return params;
    };
    /**
     * @hidden
     */
    Method.prototype._getParameterTypes = function () {
        return Reflect.getMetadata('design:paramtypes', this.parent.ctr.prototype, this.name) || [];
    };
    /**
     * @hidden
     */
    Method.prototype._getParameterNames = function () {
        var fn = this.parent.ctr.prototype[this.name];
        var names = [];
        var fnText = fn.toString().replace(STRIP_COMMENTS, '');
        var argDecl = fnText.match(FN_ARGS);
        if (argDecl[1]) {
            argDecl[1].split(FN_ARG_SPLIT).forEach(function (arg) {
                names.push(arg.trim());
            });
        }
        return names;
    };
    return Method;
})(property_1.Property);
exports.Method = Method;
