import { Property } from "./property";
import { ReflectContext } from "./reflectContext";
import { Constructor } from "./util";
import { Method } from "./method";
/**
 * Information on a concrete type.
 *
 * <uml>
 * hide members
 * hide circle
 * Type *-- Property : properties
 * Type *-- Method : methods
 * Type <-- Type : baseType
 * </uml>
 */
export declare class Type {
    /**
     * The constructor function for the type.
     */
    ctr: Constructor<any>;
    /**
     * The name of the type.
     */
    name: string;
    /**
     * @hidden
     */
    private _context;
    /**
     * Creates a type object.
     * @param context The [[ReflectContext]] that is managing this type.
     * @param ctr The constructor function for the type.
     * @hidden
     */
    constructor(context: ReflectContext, ctr: Constructor<any>);
    /**
     * Gets a list of annotations for the current type.
     * @param inherit Indicates if annotations from base types should be included. Default false.
     */
    getAnnotations(inherit?: boolean): any[];
    /**
     * Gets a list of the specified type of annotations for the current type.
     * @param annotationCtr The constructor function used to filter the annotations.
     * @param inherit Indicates if annotations from base types should be included. Default false.
     */
    getAnnotations<T>(annotationCtr: Constructor<T>, inherit?: boolean): T[];
    /**
     * Checks if the type has the specified type of annotation.
     * @param annotationCtr The constructor function for the annotation to look for.
     * @param inherit Indicates if base types should be checked as well. Default false.
     */
    hasAnnotation(annotationCtr: Constructor<any>, inherit?: boolean): boolean;
    /**
     * Returns true if the current type is a subtype of the specified type; otherwise, returns false.
     * @param type The [[Type]] or constructor function to check.
     */
    isSubtypeOf(type: Type | Constructor<any>): boolean;
    /**
     * Returns true if the current type can be assigned to the specified type; otherwise, return false.
     *
     * This happens if one of the two conditions are met:
     *  * The current type and the specified type are the same type.
     *  * The current type is a subtype of the specified type.
     *
     * @param type The [[Type]] or constructor function to check.
     */
    isAssignableTo(type: Type | Constructor<any>): boolean;
    /**
     * @hidden
     */
    private _properties;
    /**
     * A list of annotated properties for the type.
     */
    properties: Property[];
    /**
     * Returns the property with the specified name.
     * @param name The property name to find.
     */
    getProperty(name: string): Property;
    /**
     * @hidden
     */
    private _methods;
    /**
     * A list of methods for the type. Methods are available whether or not they are annotated.
     */
    methods: Method[];
    /**
     * @hidden
     */
    private _baseType;
    /**
     * The base type for the current type.
     */
    baseType: Type;
    /**
     * Indicates if the type is the global Number type.
     */
    isNumber: boolean;
    /**
     * Indicates if the type is the global String type.
     */
    isString: boolean;
    /**
     * Indicates if the type is the global Boolean type.
     */
    isBoolean: boolean;
    /**
     * Indicates if the type is the global Array type.
     */
    isArray: boolean;
    /**
     * Indicates if the type is the global Set type.
     */
    isSet: boolean;
    /**
     * Indicates if the type is the global Function type.
     */
    isFunction: boolean;
    /**
     * Indicates if the type is iterable (i.e. the type defines a method for Symbol.iterator).
     */
    isIterable: boolean;
    /**
     * Creates an instance of the type with the specified arguments.
     * @param args The arguments to pass to the constructor.
     * @returns An instance of the type.
     */
    createInstance(args?: any[]): any;
    /**
     * Gets the base type of the current type.
     * @hidden
     */
    private _getBaseType();
    /**
     * Gets a list of annotated properties for the type that are not methods.
     * @hidden
     */
    private _getPropertyNames();
    /**
     * Gets a list of methods for the type.
     * @hidden
     */
    private _getMethodNames();
    /**
     * Gets a list of annotations for the type.
     * @hidden
     */
    private _getOwnMetadata();
}
