require("reflect-metadata");
var util_1 = require("./util");
/**
 * Information on a [[Type]] property.
 *
 * <uml>
 * hide members
 * hide circle
 * Type *-- Property : properties
 * Property <-- Type : parent
 * Property <-- Type : type
 * </uml>
 */
var Property = (function () {
    /**
     * Creates a [[Property]] object.
     * @param context The [[ReflectContext]] that is managing the [[Type]].
     * @param parent The [[Type]] that owns this property.
     * @param name The name of the property.
     * @hidden
     */
    function Property(context, parent, name) {
        this.context = context;
        if (!name) {
            throw new Error("Missing required argument 'name'.");
        }
        this.parent = parent;
        this.name = name;
    }
    Object.defineProperty(Property.prototype, "type", {
        /**
         * The [[Type]] of the property. (Only available if the --emitDecoratorMetadata compiler option is enabled.)
         * @returns {Type}
         */
        get: function () {
            if (this._type === undefined) {
                this._type = this.context.getType(this._getPropertyType());
            }
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Property.prototype, "hasGetter", {
        /**
         * Returns true if the property has a get accessor.
         */
        get: function () {
            var descriptor = this._getDescriptor();
            return descriptor != null && descriptor.get !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Property.prototype, "hasSetter", {
        /**
         * Returns true if the property has a set accessor.
         */
        get: function () {
            var descriptor = this._getDescriptor();
            return descriptor != null && descriptor.set !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Property.prototype.getAnnotations = function (annotationCtr) {
        return util_1.matchingAnnotations(annotationCtr, this._getOwnMetadata());
    };
    /**
     * Checks if the property has the specified type of annotation.
     * @param annotationCtr The constructor function for the annotation to look for.
     */
    Property.prototype.hasAnnotation = function (annotationCtr) {
        return this.getAnnotations(annotationCtr).length > 0;
    };
    /**
     * Gets the value of the property on a target object.
     * @param obj The target object.
     */
    Property.prototype.getValue = function (obj) {
        // Generate getters for VM optimization on first call to the getter. Verified that this improves performance
        // more than 3x for subsequent calls. We need to wait until the first call to generate the getter because
        // the 'flags' are not necessarily set in the constructor.
        // https://docs.google.com/document/d/10W46qDNO8Dl0Uye3QX0oUDPYAwaPl0qNy73TVLjd1WI/edit?pli=1#heading=h.rigwvvsmj92x
        this.getValue = (new Function("o", "return o['" + this.name + "']"));
        return obj[this.name];
    };
    /**
     * Sets the value of the property on a target object.
     * @param obj The target object.
     * @param value The value to set.
     */
    Property.prototype.setValue = function (obj, value) {
        // See comment in getValue. Verified performance improvement for setting a value as well, but for
        // setting we got almost a 10x performance improvement.
        this.setValue = (new Function("o,v", "o['" + this.name + "'] = v"));
        obj[this.name] = value;
    };
    /**
     * @hidden
     */
    Property.prototype._getDescriptor = function () {
        if (this._descriptor === undefined) {
            this._descriptor = Object.getOwnPropertyDescriptor(this.parent.ctr.prototype, this.name) || null;
        }
        return this._descriptor;
    };
    /**
     * @hidden
     */
    Property.prototype._getOwnMetadata = function () {
        var properties = Reflect.getOwnMetadata('propMetadata', this.parent.ctr) || {};
        return properties[this.name] || [];
    };
    /**
     * @hidden
     */
    Property.prototype._getPropertyType = function () {
        return Reflect.getMetadata('design:type', this.parent.ctr.prototype, this.name);
    };
    return Property;
})();
exports.Property = Property;
